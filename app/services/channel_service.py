"""
–°–µ—Ä–≤–∏—Å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è PaidSubscribeBot.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª–∞–º–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º/—É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.
"""

from typing import Optional, List, Dict, Any
from datetime import datetime

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update

from app.database.models.channel import Channel
from app.database.models.user import User
from app.database.models.subscription import Subscription
from app.config.database import get_db_session
from app.config.settings import get_settings
from app.utils.logger import get_logger


class ChannelService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ü—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    """
    
    def __init__(self, bot: Optional[Bot] = None):
        self.logger = get_logger("services.channel")
        self.bot = bot
        self.settings = get_settings()
    
    async def get_channel_by_id(self, channel_id: int) -> Optional[Channel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Optional[Channel]: –ö–∞–Ω–∞–ª –∏–ª–∏ None
        """
        async with get_db_session() as session:
            stmt = select(Channel).where(Channel.id == channel_id)
            result = await session.execute(stmt)
            return result.scalar_one_or_none()
    
    async def get_channel_by_telegram_id(self, telegram_id: int) -> Optional[Channel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ Telegram ID.
        
        Args:
            telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Optional[Channel]: –ö–∞–Ω–∞–ª –∏–ª–∏ None
        """
        async with get_db_session() as session:
            stmt = select(Channel).where(Channel.telegram_id == telegram_id)
            result = await session.execute(stmt)
            return result.scalar_one_or_none()
    
    async def create_channel(
        self,
        telegram_id: int,
        title: str,
        username: Optional[str] = None,
        description: Optional[str] = None,
        monthly_price: Optional[float] = None,
        yearly_price: Optional[float] = None
    ) -> Channel:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            username: Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            monthly_price: –¶–µ–Ω–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            yearly_price: –¶–µ–Ω–∞ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            Channel: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        """
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º telegram_id
            existing_stmt = select(Channel).where(Channel.telegram_id == telegram_id)
            existing_result = await session.execute(existing_stmt)
            existing_channel = existing_result.scalar_one_or_none()
            
            if existing_channel:
                raise ValueError(f"–ö–∞–Ω–∞–ª —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            channel = Channel(
                telegram_id=telegram_id,
                title=title,
                username=username,
                description=description,
                monthly_price=monthly_price,
                yearly_price=yearly_price,
                is_active=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            session.add(channel)
            await session.commit()
            await session.refresh(channel)
            
            self.logger.info(
                "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª",
                channel_id=channel.id,
                telegram_id=telegram_id,
                title=title
            )
            
            return channel
    
    async def update_channel(
        self,
        channel_id: int,
        title: Optional[str] = None,
        username: Optional[str] = None,
        description: Optional[str] = None,
        monthly_price: Optional[float] = None,
        yearly_price: Optional[float] = None
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            title: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            username: –ù–æ–≤—ã–π username
            description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            monthly_price: –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            yearly_price: –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        async with get_db_session() as session:
            stmt = select(Channel).where(Channel.id == channel_id)
            result = await session.execute(stmt)
            channel = result.scalar_one_or_none()
            
            if not channel:
                self.logger.error("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", channel_id=channel_id)
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            updated = False
            
            if title is not None and channel.title != title:
                channel.title = title
                updated = True
            
            if username is not None and channel.username != username:
                channel.username = username
                updated = True
            
            if description is not None and channel.description != description:
                channel.description = description
                updated = True
            
            if monthly_price is not None and channel.monthly_price != monthly_price:
                channel.monthly_price = monthly_price
                updated = True
            
            if yearly_price is not None and channel.yearly_price != yearly_price:
                channel.yearly_price = yearly_price
                updated = True
            
            if updated:
                channel.updated_at = datetime.utcnow()
                await session.commit()
                
                self.logger.info(
                    "–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω",
                    channel_id=channel_id,
                    title=title
                )
            
            return updated
    
    async def add_user_to_channel(self, user_telegram_id: int, channel_telegram_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª.
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω
        """
        if not self.bot:
            self.logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await self.bot.get_chat(channel_telegram_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invite_link = await self.bot.create_chat_invite_link(
                chat_id=channel_telegram_id,
                member_limit=1,
                expire_date=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:\n\n{invite_link.invite_link}\n\n"
                     f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å."
            )
            
            self.logger.info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id
            )
            
            return True
            
        except TelegramBadRequest as e:
            self.logger.error(
                "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return False
        except TelegramForbiddenError as e:
            self.logger.error(
                "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return False
    
    async def remove_user_from_channel(self, user_telegram_id: int, channel_telegram_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω
        """
        if not self.bot:
            self.logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return False
        
        try:
            # –ë–∞–Ω–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞)
            await self.bot.ban_chat_member(
                chat_id=channel_telegram_id,
                user_id=user_telegram_id
            )
            
            # –°—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            await self.bot.unban_chat_member(
                chat_id=channel_telegram_id,
                user_id=user_telegram_id
            )
            
            self.logger.info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id
            )
            
            return True
            
        except TelegramBadRequest as e:
            self.logger.error(
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return False
        except TelegramForbiddenError as e:
            self.logger.error(
                "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                user_id=user_telegram_id,
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return False
    
    async def get_channel_members_count(self, channel_telegram_id: int) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Optional[int]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ None
        """
        if not self.bot:
            self.logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            chat = await self.bot.get_chat(channel_telegram_id)
            return chat.member_count
            
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            self.logger.error(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ",
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return None
    
    async def create_invite_link(
        self,
        channel_telegram_id: int,
        expire_date: Optional[datetime] = None,
        member_limit: Optional[int] = None
    ) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.
        
        Args:
            channel_telegram_id: Telegram ID –∫–∞–Ω–∞–ª–∞
            expire_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
            member_limit: –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            
        Returns:
            Optional[str]: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ None
        """
        if not self.bot:
            self.logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            invite_link = await self.bot.create_chat_invite_link(
                chat_id=channel_telegram_id,
                expire_date=expire_date,
                member_limit=member_limit
            )
            
            self.logger.info(
                "–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
                channel_id=channel_telegram_id,
                link=invite_link.invite_link
            )
            
            return invite_link.invite_link
            
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            self.logger.error(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏",
                channel_id=channel_telegram_id,
                error=str(e)
            )
            return None
    
    async def get_all_channels(self, active_only: bool = True) -> List[Channel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤.
        
        Args:
            active_only: –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            
        Returns:
            List[Channel]: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        """
        async with get_db_session() as session:
            stmt = select(Channel)
            
            if active_only:
                stmt = stmt.where(Channel.is_active == True)
            
            stmt = stmt.order_by(Channel.created_at.desc())
            
            result = await session.execute(stmt)
            return result.scalars().all()
    
    async def deactivate_channel(self, channel_id: int) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        """
        async with get_db_session() as session:
            stmt = (
                update(Channel)
                .where(Channel.id == channel_id)
                .values(
                    is_active=False,
                    updated_at=datetime.utcnow()
                )
            )
            result = await session.execute(stmt)
            await session.commit()
            
            if result.rowcount > 0:
                self.logger.info("–ö–∞–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", channel_id=channel_id)
                return True
            
            return False
    
    async def get_channel_stats(self, channel_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
        """
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel_stmt = select(Channel).where(Channel.id == channel_id)
            channel_result = await session.execute(channel_stmt)
            channel = channel_result.scalar_one_or_none()
            
            if not channel:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            active_subs_stmt = (
                select(Subscription)
                .where(
                    Subscription.channel_id == channel_id,
                    Subscription.is_active == True,
                    Subscription.expires_at > datetime.utcnow()
                )
            )
            active_subs_result = await session.execute(active_subs_stmt)
            active_subscriptions = len(active_subs_result.scalars().all())
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            total_subs_stmt = select(Subscription).where(Subscription.channel_id == channel_id)
            total_subs_result = await session.execute(total_subs_stmt)
            total_subscriptions = len(total_subs_result.scalars().all())
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Telegram (–µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)
            telegram_members = None
            if self.bot:
                telegram_members = await self.get_channel_members_count(channel.telegram_id)
            
            return {
                "channel_id": channel_id,
                "title": channel.title,
                "username": channel.username,
                "active_subscriptions": active_subscriptions,
                "total_subscriptions": total_subscriptions,
                "telegram_members": telegram_members,
                "monthly_price": channel.monthly_price,
                "yearly_price": channel.yearly_price,
                "is_active": channel.is_active,
                "created_at": channel.created_at.isoformat() if channel.created_at else None
            } 