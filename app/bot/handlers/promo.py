"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è PaidSubscribeBot.
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.
"""

from typing import Optional
from decimal import Decimal
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.promo_service import PromoService
from app.services.user_service import UserService
from app.database.models.promo import PromoCodeType
from app.utils.logger import get_logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
promo_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
promo_service = PromoService()
user_service = UserService()

logger = get_logger("handlers.promo")


class PromoStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    entering_code = State()
    creating_code = State()
    entering_amount_to_check = State()


def create_promo_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_enter"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_my_codes")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–∏–¥–∫—É", callback_data="promo_check_discount"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö", callback_data="promo_info")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard


def create_admin_promo_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promo_create"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_promo_stats")
        ],
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo_list"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_promo_settings")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")
        ]
    ])
    return keyboard


@promo_router.message(Command("promo"))
async def cmd_promo_menu(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    promo_codes = await promo_service.get_promo_codes(
        active_only=True,
        user_telegram_id=str(user_id),
        limit=5
    )
    
    text = f"""
üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

üí° <b>–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b> {len(promo_codes)}

üí∞ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
3. –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéÅ <b>–í–∏–¥—ã —Å–∫–∏–¥–æ–∫:</b>
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (‚ÇΩ)
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ (%)
"""
    
    await message.answer(
        text,
        reply_markup=create_promo_menu_keyboard(),
        parse_mode="HTML"
    )


@promo_router.callback_query(F.data == "promo_menu")
async def cb_promo_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    await state.clear()
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    promo_codes = await promo_service.get_promo_codes(
        active_only=True,
        user_telegram_id=str(user_id),
        limit=5
    )
    
    text = f"""
üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

üí° <b>–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b> {len(promo_codes)}

üí∞ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
3. –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéÅ <b>–í–∏–¥—ã —Å–∫–∏–¥–æ–∫:</b>
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (‚ÇΩ)
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ (%)
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=create_promo_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@promo_router.callback_query(F.data == "promo_enter")
async def cb_promo_enter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    text = """
üéüÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –∏ —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏.

üí° <b>–§–æ—Ä–º–∞—Ç:</b> PROMO2024 –∏–ª–∏ promo123

–ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="promo_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(PromoStates.entering_code)
    await callback.answer()


@promo_router.message(PromoStates.entering_code)
async def process_promo_code_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    code = message.text.strip().upper()
    user_id = message.from_user.id
    
    if len(code) < 3 or len(code) > 50:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    test_amount = Decimal('100')  # –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
    validation = await promo_service.validate_promo_code(code, user_id, test_amount)
    
    if validation["valid"]:
        promo_code = validation["promo_code"]
        discount = validation["discount"]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        if promo_code.type == PromoCodeType.PERCENTAGE:
            discount_text = f"{float(promo_code.value)}%"
        else:
            discount_text = f"{float(promo_code.value)} ‚ÇΩ"
        
        valid_until_text = ""
        if promo_code.valid_until:
            valid_until_text = f"\n‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {promo_code.valid_until.strftime('%d.%m.%Y %H:%M')}"
        
        min_amount_text = ""
        if promo_code.min_amount:
            min_amount_text = f"\nüíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {float(promo_code.min_amount)} ‚ÇΩ"
        
        text = f"""
‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!</b>

üéüÔ∏è <b>–ö–æ–¥:</b> {code}
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {promo_code.title}
üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {discount_text}
üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {promo_code.current_uses}/{promo_code.max_uses or '‚àû'}
üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤–∞—Å:</b> {promo_code.max_uses_per_user - await promo_service.get_user_promo_usage_count(promo_code.id, user_id)}{valid_until_text}{min_amount_text}

üí° <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {promo_code.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}

–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏!
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription"),
            ],
            [
                InlineKeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥", callback_data="promo_enter"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")
            ]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(applied_promo_code=code)
        
    else:
        text = f"""
‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>

üéüÔ∏è <b>–ö–æ–¥:</b> {code}
üö´ <b>–û—à–∏–±–∫–∞:</b> {validation['error']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥", callback_data="promo_enter"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")
            ]
        ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.clear()


@promo_router.callback_query(F.data == "promo_my_codes")
async def cb_promo_my_codes(callback: CallbackQuery):
    """–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    personal_codes = await promo_service.get_promo_codes(
        active_only=True,
        user_telegram_id=str(user_id),
        limit=10
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
    general_codes = await promo_service.get_promo_codes(
        active_only=True,
        user_telegram_id=None,
        limit=5
    )
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ (–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
    general_codes = [code for code in general_codes if not code.user_telegram_id]
    
    text = "üéüÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
    
    if personal_codes:
        text += "üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ:</b>\n"
        for code in personal_codes:
            if code.type == PromoCodeType.PERCENTAGE:
                discount = f"{float(code.value)}%"
            else:
                discount = f"{float(code.value)} ‚ÇΩ"
            
            remaining = code.max_uses_per_user - await promo_service.get_user_promo_usage_count(code.id, user_id)
            text += f"‚Ä¢ <code>{code.code}</code> - {discount} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
        text += "\n"
    
    if general_codes:
        text += "üåê <b>–û–±—â–∏–µ:</b>\n"
        for code in general_codes[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            if code.type == PromoCodeType.PERCENTAGE:
                discount = f"{float(code.value)}%"
            else:
                discount = f"{float(code.value)} ‚ÇΩ"
            text += f"‚Ä¢ <code>{code.code}</code> - {discount}\n"
    
    if not personal_codes and not general_codes:
        text += "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏!"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_enter")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@promo_router.callback_query(F.data == "promo_check_discount")
async def cb_promo_check_discount(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å—É–º–º—ã"""
    text = """
üí∞ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.

üí° <b>–§–æ—Ä–º–∞—Ç:</b> 199 –∏–ª–∏ 1990

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="promo_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(PromoStates.entering_amount_to_check)
    await callback.answer()


@promo_router.message(PromoStates.entering_amount_to_check)
async def process_amount_check(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–∫–∏"""
    try:
        amount = Decimal(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")]
            ])
        )
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    promo_codes = await promo_service.get_promo_codes(
        active_only=True,
        user_telegram_id=str(user_id),
        limit=10
    )
    
    text = f"üí∞ <b>–†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å—É–º–º—ã: {float(amount)} ‚ÇΩ</b>\n\n"
    
    best_discount = Decimal('0')
    best_code = None
    
    if promo_codes:
        text += "üéüÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
        
        for code in promo_codes:
            validation = await promo_service.validate_promo_code(code.code, user_id, amount)
            
            if validation["valid"]:
                discount = validation["discount"]
                final_amount = amount - discount
                
                if code.type == PromoCodeType.PERCENTAGE:
                    discount_text = f"{float(code.value)}%"
                else:
                    discount_text = f"{float(code.value)} ‚ÇΩ"
                
                text += f"‚Ä¢ <code>{code.code}</code> ({discount_text})\n"
                text += f"  üí∏ –°–∫–∏–¥–∫–∞: {float(discount)} ‚ÇΩ\n"
                text += f"  üí≥ –ö –æ–ø–ª–∞—Ç–µ: {float(final_amount)} ‚ÇΩ\n\n"
                
                if discount > best_discount:
                    best_discount = discount
                    best_code = code
            else:
                text += f"‚Ä¢ <code>{code.code}</code> - ‚ùå {validation['error']}\n\n"
    
    if best_code:
        text += f"üèÜ <b>–õ—É—á—à–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{best_code.code}</code>\n"
        text += f"üí∞ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è:</b> {float(best_discount)} ‚ÇΩ"
    else:
        text += "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_enter")
        ],
        [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.clear()


@promo_router.callback_query(F.data == "promo_info")
async def cb_promo_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö"""
    text = """
‚ÑπÔ∏è <b>–û –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö</b>

üéüÔ∏è <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–æ–∫–æ–¥?</b>
–ü—Ä–æ–º–æ–∫–æ–¥ - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∫–∏–¥–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏.

üí∞ <b>–¢–∏–ø—ã —Å–∫–∏–¥–æ–∫:</b>
‚Ä¢ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</b> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
‚Ä¢ <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è</b> - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏

üîÑ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ–º–æ–∫–æ–¥—ã"
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
3. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É - —Å–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéÅ <b>–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>
‚Ä¢ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞)
‚Ä¢ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –í —Ä–∞–º–∫–∞—Ö –∞–∫—Ü–∏–π –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
‚Ä¢ –û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞

üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_enter")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_menu")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@promo_router.callback_query(F.data == "admin_promo")
async def cb_admin_promo_menu(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await promo_service.get_promo_stats()
    
    text = f"""
üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['total_promo_codes']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_promo_codes']}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_usages']}
‚Ä¢ –û–±—â–∞—è —Å–∫–∏–¥–∫–∞: {stats['total_discount_given']} ‚ÇΩ

‚öôÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=create_admin_promo_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def get_applied_promo_code(state: FSMContext) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    return data.get("applied_promo_code") 