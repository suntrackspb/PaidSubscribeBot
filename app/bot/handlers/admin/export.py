import asyncio
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bot.middlewares.auth import AdminRequiredMiddleware
from app.bot.utils.texts import AdminTexts
from app.services.export_service import export_service
from app.utils.logger import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export_router = Router()
export_router.message.middleware(AdminRequiredMiddleware())
export_router.callback_query.middleware(AdminRequiredMiddleware())

class ExportStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    waiting_for_period = State()
    waiting_for_format = State()
    waiting_for_filters = State()

def get_export_main_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users"),
            InlineKeyboardButton(text="üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="export_subscriptions")
        ],
        [
            InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="export_payments"),
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="export_analytics")
        ],
        [
            InlineKeyboardButton(text="üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="export_full_backup"),
            InlineKeyboardButton(text="üîÑ –ê–≤—Ç–æ-–±—ç–∫–∞–ø", callback_data="export_auto_backup")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω", callback_data="admin_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_format_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìÑ CSV", callback_data="format_csv"),
            InlineKeyboardButton(text="üìä JSON", callback_data="format_json")
        ],
        [
            InlineKeyboardButton(text="üìà Excel", callback_data="format_excel")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="export_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_period_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
            InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
            InlineKeyboardButton(text="üìÖ –ó–∞ –≥–æ–¥", callback_data="period_year")
        ],
        [
            InlineKeyboardButton(text="üìÖ –í—Å—ë –≤—Ä–µ–º—è", callback_data="period_all"),
            InlineKeyboardButton(text="üìÖ –°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="export_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@export_router.callback_query(F.data == "admin_export")
async def admin_export_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await state.clear()
    
    text = AdminTexts.EXPORT_MENU
    await callback.message.edit_text(
        text=text,
        reply_markup=get_export_main_keyboard()
    )

@export_router.callback_query(F.data.startswith("export_"))
async def handle_export_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    export_type = callback.data.replace("export_", "")
    
    if export_type == "menu":
        await admin_export_menu(callback, state)
        return
    
    if export_type == "full_backup":
        await create_full_backup(callback)
        return
    
    if export_type == "auto_backup":
        await schedule_auto_backup(callback)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(export_type=export_type)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
    text = f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
    text += f"–í—ã–±—Ä–∞–Ω–æ: {export_type.replace('_', ' ').title()}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_format_keyboard()
    )

@export_router.callback_query(F.data.startswith("format_"))
async def handle_format_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = callback.data.replace("format_", "")
    data = await state.get_data()
    
    await state.update_data(format=format_type)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
    text = f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
    text += f"–¢–∏–ø: {data['export_type'].replace('_', ' ').title()}\n"
    text += f"–§–æ—Ä–º–∞—Ç: {format_type.upper()}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_period_keyboard()
    )

@export_router.callback_query(F.data.startswith("period_"))
async def handle_period_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    period = callback.data.replace("period_", "")
    data = await state.get_data()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    end_date = datetime.utcnow()
    start_date = None
    
    if period == "today":
        start_date = end_date.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "week":
        start_date = end_date - timedelta(days=7)
    elif period == "month":
        start_date = end_date - timedelta(days=30)
    elif period == "year":
        start_date = end_date - timedelta(days=365)
    elif period == "all":
        start_date = None
        end_date = None
    elif period == "custom":
        await callback.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `01.01.2024-31.01.2024`\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'all' –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="export_" + data['export_type'])
            ]])
        )
        await state.set_state(ExportStates.waiting_for_period)
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    await perform_export(callback, state, start_date, end_date)

@export_router.message(ExportStates.waiting_for_period)
async def handle_custom_period(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    data = await state.get_data()
    
    try:
        if message.text.lower() == "all":
            start_date = None
            end_date = None
        else:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì
            dates = message.text.split("-")
            if len(dates) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            start_str, end_str = dates
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y")
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y")
            end_date = end_date.replace(hour=23, minute=59, second=59)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        await perform_export(message, state, start_date, end_date)
        
    except Exception as e:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì`\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'all' –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
        )

async def perform_export(
    event, 
    state: FSMContext, 
    start_date: Optional[datetime], 
    end_date: Optional[datetime]
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    export_type = data['export_type']
    format_type = data['format']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    if hasattr(event, 'message'):
        message = event.message
    else:
        message = event
    
    status_message = await message.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if export_type == "users":
            export_data = await export_service.export_users(
                format_type=format_type,
                start_date=start_date,
                end_date=end_date
            )
        elif export_type == "subscriptions":
            export_data = await export_service.export_subscriptions(
                format_type=format_type,
                start_date=start_date,
                end_date=end_date
            )
        elif export_type == "payments":
            export_data = await export_service.export_payments(
                format_type=format_type,
                start_date=start_date,
                end_date=end_date
            )
        elif export_type == "analytics":
            export_data = await export_service.export_analytics(
                format_type=format_type,
                start_date=start_date,
                end_date=end_date
            )
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_type}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        period_str = ""
        if start_date and end_date:
            period_str = f"_{start_date.strftime('%Y%m%d')}-{end_date.strftime('%Y%m%d')}"
        elif start_date:
            period_str = f"_from_{start_date.strftime('%Y%m%d')}"
        
        filename = f"{export_type}{period_str}.{format_type}"
        
        if isinstance(export_data, str):
            file_data = export_data.encode('utf-8')
        else:
            file_data = export_data
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = BufferedInputFile(file_data, filename)
        
        await status_message.delete()
        
        caption = f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        caption += f"**–¢–∏–ø:** {export_type.replace('_', ' ').title()}\n"
        caption += f"**–§–æ—Ä–º–∞—Ç:** {format_type.upper()}\n"
        if start_date:
            caption += f"**–ü–µ—Ä–∏–æ–¥:** {start_date.strftime('%d.%m.%Y')}"
            if end_date:
                caption += f" - {end_date.strftime('%d.%m.%Y')}"
            caption += "\n"
        else:
            caption += f"**–ü–µ—Ä–∏–æ–¥:** –í—Å–µ –≤—Ä–µ–º—è\n"
        caption += f"**–†–∞–∑–º–µ—Ä:** {len(file_data)} –±–∞–π—Ç"
        
        await message.answer_document(
            document=document,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_menu"),
                InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω", callback_data="admin_main")
            ]])
        )
        
        logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç {export_type} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type} –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
    except Exception as e:
        await status_message.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="export_menu")
            ]])
        )
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {export_type}: {e}")
    
    await state.clear()

async def create_full_backup(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    status_message = await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞...")
    
    try:
        backup_data = await export_service.create_full_backup()
        
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        filename = f"full_backup_{timestamp}.zip"
        
        document = BufferedInputFile(backup_data, filename)
        
        caption = f"üíæ **–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω**\n\n"
        caption += f"**–î–∞—Ç–∞:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n"
        caption += f"**–†–∞–∑–º–µ—Ä:** {len(backup_data)} –±–∞–π—Ç\n"
        caption += f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∫–∏, –ø–ª–∞—Ç–µ–∂–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        
        await callback.message.answer_document(
            document=document,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="export_full_backup"),
                InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="export_menu")
            ]])
        )
        
        await status_message.delete()
        logger.info("–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="export_full_backup")
            ]])
        )
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

async def schedule_auto_backup(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    status_message = await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞...")
    
    try:
        result = await export_service.schedule_automatic_backup()
        
        if result["success"]:
            text = f"‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω**\n\n"
            text += f"**–§–∞–π–ª:** {result['backup_path']}\n"
            text += f"**–†–∞–∑–º–µ—Ä:** {result['backup_size']} –±–∞–π—Ç\n"
            text += f"**–í—Ä–µ–º—è:** {datetime.fromisoformat(result['created_at']).strftime('%d.%m.%Y %H:%M')}"
        else:
            text = f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞**\n\n"
            text += f"**–û—à–∏–±–∫–∞:** {result['error']}"
        
        await status_message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="export_auto_backup"),
                InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="export_menu")
            ]])
        )
        
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø: {result}")
        
    except Exception as e:
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞:\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="export_auto_backup")
            ]])
        )
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É
@export_router.message(Command("export"))
async def export_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É"""
    await state.clear()
    
    text = AdminTexts.EXPORT_MENU
    await message.answer(
        text=text,
        reply_markup=get_export_main_keyboard()
    ) 