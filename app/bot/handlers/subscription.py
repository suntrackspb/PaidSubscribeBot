"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ PaidSubscribeBot.
"""

from typing import Optional
from datetime import datetime, timedelta
from decimal import Decimal

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.bot.states.subscription import SubscriptionStates
from app.bot.keyboards.inline import (
    get_subscription_menu_keyboard,
    get_subscription_plans_keyboard,
    get_payment_methods_keyboard
)
from app.bot.utils.texts import MESSAGES
from app.services.user_service import UserService
from app.services.subscription_service import SubscriptionService
from app.services.channel_service import ChannelService
from app.services.notification_service import NotificationService
from app.payments.manager import PaymentManager
from app.database.models.payment import PaymentMethod
from app.utils.logger import get_logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
subscription_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
user_service = UserService()
subscription_service = SubscriptionService()
channel_service = ChannelService()
notification_service = NotificationService()
payment_manager = PaymentManager()

logger = get_logger("handlers.subscription")


@subscription_router.message(Command("subscription", "sub"))
async def cmd_subscription(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await user_service.update_user_activity(user.telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = await subscription_service.get_user_subscriptions(user.id, active_only=True)
    
    if subscriptions:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        for sub in subscriptions:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Å –∫–∞–Ω–∞–ª–æ–º)
            text += f"üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{sub.expires_at.strftime('%d.%m.%Y')}</b>\n"
            days_left = (sub.expires_at - datetime.utcnow()).days
            if days_left <= 3:
                text += f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>\n"
            text += "\n"
        
        keyboard = get_subscription_menu_keyboard(has_subscription=True)
    else:
        text = MESSAGES["no_subscription"]
        keyboard = get_subscription_menu_keyboard(has_subscription=False)
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@subscription_router.callback_query(F.data == "new_subscription")
async def callback_new_subscription(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    channels = await channel_service.get_all_channels(active_only=True)
    
    if not channels:
        await callback.message.edit_text(
            "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞)
    channel = channels[0]
    
    text = f"üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
    text += f"üì∫ –ö–∞–Ω–∞–ª: <b>{channel.title}</b>\n"
    if channel.description:
        text += f"üìù {channel.description}\n"
    text += "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>"
    
    keyboard = get_subscription_plans_keyboard(channel)
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(SubscriptionStates.selecting_plan)
    await state.update_data(channel_id=channel.id)


@subscription_router.callback_query(F.data.startswith("plan_"), SubscriptionStates.selecting_plan)
async def callback_select_plan(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    plan_type = callback.data.split("_")[1]  # monthly –∏–ª–∏ yearly
    data = await state.get_data()
    channel_id = data.get("channel_id")
    
    if not channel_id:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = await channel_service.get_channel_by_id(channel_id)
    if not channel:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if plan_type == "monthly":
        price = Decimal(str(channel.monthly_price or 199))
        duration_days = 30
        plan_name = "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    else:  # yearly
        price = Decimal(str(channel.yearly_price or 1990))
        duration_days = 365
        plan_name = "–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        plan_type=plan_type,
        price=float(price),
        duration_days=duration_days,
        plan_name=plan_name
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    text = f"üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n\n"
    text += f"üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n"
    text += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_days} –¥–Ω–µ–π</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    available_methods = payment_manager.get_available_methods()
    keyboard = get_payment_methods_keyboard(available_methods)
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(SubscriptionStates.selecting_payment)


@subscription_router.callback_query(F.data.startswith("pay_"), SubscriptionStates.selecting_payment)
async def callback_select_payment(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    method_name = callback.data.split("_", 1)[1]
    data = await state.get_data()
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤ enum
        payment_method = PaymentMethod(method_name)
    except ValueError:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    from app.payments.base import PaymentRequest
    
    payment_request = PaymentRequest(
        amount=Decimal(str(data["price"])),
        currency="RUB",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {data['plan_name']}",
        user_id=user.telegram_id,
        return_url="https://t.me/your_bot",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        metadata={
            "user_id": user.id,
            "channel_id": data["channel_id"],
            "plan_type": data["plan_type"],
            "duration_days": data["duration_days"]
        }
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        payment_response = await payment_manager.create_payment(payment_method, payment_request)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(payment_id=payment_response.payment_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        text = f"üí≥ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>\n\n"
        text += f"üì¶ –ü–ª–∞–Ω: <b>{data['plan_name']}</b>\n"
        text += f"üí∞ –°—É–º–º–∞: <b>{data['price']} ‚ÇΩ</b>\n"
        text += f"üí≥ –ú–µ—Ç–æ–¥: <b>{payment_method.value}</b>\n\n"
        
        if payment_response.payment_url:
            text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_response.payment_url)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_response.payment_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
        elif payment_response.qr_code:
            text += "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_response.payment_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
            # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        else:
            text += f"ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_response.payment_id}</code>"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_response.payment_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(SubscriptionStates.waiting_payment)
        
        logger.info(
            "–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏",
            user_id=user.telegram_id,
            payment_id=payment_response.payment_id,
            amount=float(payment_request.amount),
            method=payment_method.value
        )
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", error=str(e), user_id=user.telegram_id)
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n{str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@subscription_router.callback_query(F.data.startswith("check_payment_"))
async def callback_check_payment(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    payment_id = callback.data.split("_", 2)[2]
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # TODO: –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
        for method in payment_manager.get_available_methods():
            try:
                status_data = await payment_manager.check_payment_status(method, payment_id)
                
                if status_data.status == "completed":
                    # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    await process_successful_payment(callback, state, status_data, data)
                    return
                elif status_data.status == "failed":
                    await callback.message.edit_text(
                        f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {status_data.failure_reason or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                        parse_mode="HTML"
                    )
                    return
                elif status_data.status == "pending":
                    await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
                    return
                    
            except Exception as e:
                continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥
        
        await callback.answer("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", error=str(e), payment_id=payment_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def process_successful_payment(callback: CallbackQuery, state: FSMContext, status_data, subscription_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await subscription_service.create_subscription(
            user_id=user.id,
            channel_id=subscription_data["channel_id"],
            duration_days=subscription_data["duration_days"],
            price=Decimal(str(subscription_data["price"]))
        )
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await subscription_service.activate_subscription(subscription.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = await channel_service.get_channel_by_id(subscription_data["channel_id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
        if channel:
            await channel_service.add_user_to_channel(
                user_telegram_id=user.telegram_id,
                channel_telegram_id=channel.telegram_id
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await notification_service.send_payment_success_notification(
            user=user,
            payment=status_data,  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –º–æ–¥–µ–ª—å Payment
            subscription=subscription
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        text = f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        text += f"üì¶ –ü–ª–∞–Ω: <b>{subscription_data['plan_name']}</b>\n"
        text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{subscription.expires_at.strftime('%d.%m.%Y')}</b>\n\n"
        text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª! üéâ"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel.username}" if channel and channel.username else "https://t.me/your_channel")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
        logger.info(
            "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            user_id=user.telegram_id,
            subscription_id=subscription.id,
            channel_id=channel.id if channel else None
        )
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", error=str(e), user_id=user.telegram_id)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@subscription_router.callback_query(F.data == "my_subscriptions")
async def callback_my_subscriptions(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subscriptions = await subscription_service.get_user_subscriptions(user.id, active_only=False)
    
    if not subscriptions:
        text = "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="new_subscription")]
        ])
    else:
        text = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        
        for i, sub in enumerate(subscriptions, 1):
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active and sub.expires_at > datetime.utcnow() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            text += f"{i}. {status}\n"
            text += f"   üìÖ –î–æ: {sub.expires_at.strftime('%d.%m.%Y')}\n"
            text += f"   üí∞ –¶–µ–Ω–∞: {sub.price} ‚ÇΩ\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="new_subscription")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription_menu")]
        ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@subscription_router.callback_query(F.data == "cancel_payment")
async def callback_cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    await state.clear()
    
    text = "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="new_subscription")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@subscription_router.callback_query(F.data == "subscription_menu")
async def callback_subscription_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    await state.clear()
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    await cmd_subscription(callback.message, state) 