"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è PaidSubscribeBot.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π, –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏.
"""

from decimal import Decimal
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery
from aiogram.filters import Command

from app.bot.keyboards.inline import (
    get_payment_methods_keyboard,
    get_subscription_plans_keyboard,
    get_main_menu_keyboard
)
from app.bot.utils.texts import (
    PAYMENT_METHODS_TEXT,
    PAYMENT_CREATED_TEXT,
    PAYMENT_ERROR_TEXT,
    PAYMENT_SUCCESS_TEXT,
    SUBSCRIPTION_PLANS_TEXT
)
from app.payments.manager import payment_manager
from app.payments.base import PaymentRequest, PaymentProviderError
from app.database.models.payment import PaymentMethod
from app.utils.logger import get_logger

router = Router()
logger = get_logger("bot.payments")


@router.message(Command("pay", "payment", "subscribe"))
async def cmd_payment(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
        keyboard = get_subscription_plans_keyboard()
        await message.answer(
            SUBSCRIPTION_PLANS_TEXT,
            reply_markup=keyboard
        )
        
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–ª–∞—Ç—É",
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ–ø–ª–∞—Ç—ã",
            user_id=message.from_user.id,
            error=str(e)
        )
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("subscription_"))
async def process_subscription_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data
        subscription_type = callback.data.split("_")[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        prices = {
            "basic": 199,
            "premium": 499,
            "vip": 999
        }
        
        price = prices.get(subscription_type, 199)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ callback_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        available_methods = payment_manager.get_available_methods()
        keyboard = get_payment_methods_keyboard(available_methods, subscription_type, price)
        
        await callback.message.edit_text(
            PAYMENT_METHODS_TEXT.format(
                plan=subscription_type.title(),
                price=price
            ),
            reply_markup=keyboard
        )
        
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
            user_id=callback.from_user.id,
            subscription_type=subscription_type,
            price=price
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            user_id=callback.from_user.id,
            error=str(e)
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("pay_"))
async def process_payment_method_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        await callback.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: pay_method_subscription_price
        parts = callback.data.split("_")
        method_str = parts[1]
        subscription_type = parts[2]
        price = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        method_mapping = {
            "yoomoney": PaymentMethod.YOOMONEY,
            "stars": PaymentMethod.TELEGRAM_STARS,
            "sbp": PaymentMethod.SBP,
            "card": PaymentMethod.BANK_CARD
        }
        
        payment_method = method_mapping.get(method_str)
        if not payment_method:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
        if not payment_manager.is_method_available(payment_method):
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_request = PaymentRequest(
            amount=Decimal(str(price)),
            currency="RUB",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type.title()}",
            user_id=callback.from_user.id,
            metadata={
                "subscription_type": subscription_type,
                "user_id": callback.from_user.id,
                "username": callback.from_user.username
            }
        )
        
        try:
            payment_response = await payment_manager.create_payment(payment_method, payment_request)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            if payment_method == PaymentMethod.TELEGRAM_STARS:
                # –î–ª—è Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
                provider = payment_manager.get_provider(payment_method)
                if provider and hasattr(provider, 'send_invoice_to_user'):
                    success = await provider.send_invoice_to_user(
                        callback.from_user.id,
                        payment_response.metadata
                    )
                    if success:
                        await callback.message.edit_text(
                            "‚≠ê –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.",
                            reply_markup=get_main_menu_keyboard()
                        )
                    else:
                        await callback.message.edit_text(
                            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=get_main_menu_keyboard()
                        )
                
            elif payment_method == PaymentMethod.SBP:
                # –î–ª—è –°–ë–ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥
                text = PAYMENT_CREATED_TEXT.format(
                    method="–°–ë–ü",
                    amount=price,
                    payment_id=payment_response.payment_id[:8]
                )
                
                if payment_response.qr_code_url:
                    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
                    text += "\n\nüì± QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
                
                if payment_response.payment_url:
                    text += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏]({payment_response.payment_url})"
                
                await callback.message.edit_text(
                    text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                text = PAYMENT_CREATED_TEXT.format(
                    method=payment_manager.get_provider(payment_method).name,
                    amount=price,
                    payment_id=payment_response.payment_id[:8]
                )
                
                if payment_response.payment_url:
                    text += f"\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({payment_response.payment_url})"
                
                await callback.message.edit_text(
                    text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
            
            logger.info(
                "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω",
                user_id=callback.from_user.id,
                payment_method=payment_method.value,
                payment_id=payment_response.payment_id,
                amount=price
            )
            
        except PaymentProviderError as e:
            await callback.message.edit_text(
                PAYMENT_ERROR_TEXT.format(error=str(e)),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞",
                user_id=callback.from_user.id,
                payment_method=payment_method.value,
                error=str(e)
            )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã",
            user_id=callback.from_user.id,
            error=str(e)
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query –¥–ª—è Telegram Stars"""
    try:
        # –î–ª—è Telegram Stars –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await pre_checkout_query.answer(ok=True)
        
        logger.info(
            "Pre-checkout query –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
            user_id=pre_checkout_query.from_user.id,
            total_amount=pre_checkout_query.total_amount,
            currency=pre_checkout_query.currency
        )
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query",
            user_id=pre_checkout_query.from_user.id,
            error=str(e)
        )
        await pre_checkout_query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Telegram Stars"""
    try:
        payment = message.successful_payment
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        payment_data = {
            "telegram_payment_charge_id": payment.telegram_payment_charge_id,
            "total_amount": payment.total_amount,
            "currency": payment.currency,
            "invoice_payload": payment.invoice_payload
        }
        
        try:
            payment_id, status_data = await payment_manager.process_webhook(
                PaymentMethod.TELEGRAM_STARS,
                payment_data
            )
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
            await message.answer(
                PAYMENT_SUCCESS_TEXT.format(
                    amount=payment.total_amount,
                    currency="‚≠ê"
                ),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info(
                "–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                user_id=message.from_user.id,
                payment_id=payment_id,
                amount=payment.total_amount
            )
            
        except PaymentProviderError as e:
            logger.error(
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞",
                user_id=message.from_user.id,
                error=str(e)
            )
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ successful_payment",
            user_id=message.from_user.id,
            error=str(e)
        )
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.") 