"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è PaidSubscribeBot.
–í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
"""

from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
import asyncio

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.bot.keyboards.inline import (
    admin_menu_keyboard,
    admin_users_keyboard,
    user_management_keyboard
)
from app.bot.utils.texts import Messages
from app.bot.middlewares.auth import AdminMiddleware
from app.services.user_service import UserService
from app.services.subscription_service import SubscriptionService
from app.services.channel_service import ChannelService
from app.services.notification_service import NotificationService
from app.database.models.user import User
from app.database.models.subscription import Subscription
from app.database.models.payment import Payment
from app.config.settings import get_settings
from app.utils.logger import get_logger, log_admin_action

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
admin_router = Router()
admin_router.message.middleware(AdminMiddleware())
admin_router.callback_query.middleware(AdminMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
user_service = UserService()
subscription_service = SubscriptionService()
channel_service = ChannelService()
notification_service = NotificationService()

logger = get_logger("handlers.admin")
settings = get_settings()


@admin_router.message(Command("admin"))
async def cmd_admin_panel(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    log_admin_action(
        admin_id=message.from_user.id,
        action="access_admin_panel"
    )
    
    text = """
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞.
"""
    
    await message.answer(
        text,
        reply_markup=admin_menu_keyboard(),
        parse_mode="HTML"
    )


@admin_router.callback_query(F.data == "admin_menu")
async def cb_admin_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    text = """
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_stats")
async def cb_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    log_admin_action(
        admin_id=callback.from_user.id,
        action="view_stats"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await user_service.get_users_count()
        active_users = await user_service.get_active_users_count(days=7)
        new_users_today = await user_service.get_new_users_count(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
        active_subscriptions = await subscription_service.get_active_subscriptions_count()
        expired_subscriptions = await subscription_service.get_expired_subscriptions_count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        payments_today = await subscription_service.get_payments_count(days=1)
        revenue_today = await subscription_service.get_revenue(days=1)
        payments_month = await subscription_service.get_payments_count(days=30)
        revenue_month = await subscription_service.get_revenue(days=30)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        conversion_rate = 0
        if total_users > 0:
            conversion_rate = round((active_subscriptions / total_users) * 100, 1)
        
        text = Messages.ADMIN_STATS.format(
            total_users=total_users,
            active_users=active_users,
            new_users_today=new_users_today,
            active_subscriptions=active_subscriptions,
            expired_subscriptions=expired_subscriptions,
            trial_subscriptions=0,  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            payments_today=payments_today,
            revenue_today=revenue_today,
            payments_month=payments_month,
            revenue_month=revenue_month,
            failed_payments=0,  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            conversion_rate=conversion_rate
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users")
async def cb_admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    log_admin_action(
        admin_id=callback.from_user.id,
        action="view_users"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_service.get_recent_users(limit=10)
        
        text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        
        if users:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in users:
                status = "üü¢" if user.is_active else "üî¥"
                text += f"{status} {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{user.username or '–Ω–µ—Ç'})\n"
                text += f"   ID: <code>{user.telegram_id}</code>\n"
                text += f"   –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        else:
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        await callback.message.edit_text(
            text,
            reply_markup=admin_users_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
    
    await callback.answer()


@admin_router.callback_query(F.data == "admin_find_user")
async def cb_admin_find_user(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"""
    await state.set_state("finding_user")
    
    text = """
üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username (—Å @ –∏–ª–∏ –±–µ–∑):

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ <code>123456789</code>
‚Ä¢ <code>@username</code>
‚Ä¢ <code>username</code>
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@admin_router.message(F.text, lambda m, state: state and state.get_state() == "finding_user")
async def process_find_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_query = message.text.strip()
    
    try:
        user = None
        
        # –ü–æ–∏—Å–∫ –ø–æ ID
        if search_query.isdigit():
            user = await user_service.get_user_by_telegram_id(int(search_query))
        
        # –ü–æ–∏—Å–∫ –ø–æ username
        else:
            username = search_query.replace("@", "")
            user = await user_service.get_user_by_username(username)
        
        if user:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = await subscription_service.get_user_subscriptions(user.id)
            
            text = f"""
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>

<b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>ID:</b> <code>{user.telegram_id}</code>
<b>–Ø–∑—ã–∫:</b> {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}
<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–∏–∫–æ–≥–¥–∞'}
<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {'üö´ –î–∞' if user.is_banned else '‚úÖ –ù–µ—Ç'}

<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b> {len(subscriptions)}
"""
            
            keyboard = user_management_keyboard(user.telegram_id, user.is_banned)
            
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
        else:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        await state.clear()


@admin_router.callback_query(F.data.startswith("admin_toggle_ban_"))
async def cb_toggle_user_ban(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[-1])
    
    try:
        user = await user_service.get_user_by_telegram_id(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        new_status = not user.is_banned
        await user_service.update_user_ban_status(user_id, new_status)
        
        action = "ban" if new_status else "unban"
        log_admin_action(
            admin_id=callback.from_user.id,
            action=f"{action}_user",
            target_user_id=user_id
        )
        
        status_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = user_management_keyboard(user_id, new_status)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@admin_router.callback_query(F.data == "admin_broadcast")
async def cb_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    log_admin_action(
        admin_id=callback.from_user.id,
        action="start_broadcast"
    )
    
    await state.set_state("broadcast_message")
    
    text = """
üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@admin_router.message(F.text, lambda m, state: state and state.get_state() == "broadcast_message")
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_service.get_all_active_users()
        
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            await state.clear()
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        text = f"""
üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {len(users)}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>

{broadcast_text[:200]}{'...' if len(broadcast_text) > 200 else ''}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
            ]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(broadcast_text=broadcast_text, users_count=len(users))
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()


@admin_router.callback_query(F.data == "confirm_broadcast")
async def cb_confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")
    
    if not broadcast_text:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await state.clear()
        return
    
    log_admin_action(
        admin_id=callback.from_user.id,
        action="execute_broadcast",
        message_length=len(broadcast_text)
    )
    
    await callback.message.edit_text(
        "üì§ <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        parse_mode="HTML"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        await notification_service.broadcast_message(
            message=broadcast_text,
            admin_id=callback.from_user.id
        )
        
        await callback.message.edit_text(
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")]
            ]),
            parse_mode="HTML"
        )
    
    await state.clear()
    await callback.answer()


@admin_router.callback_query(F.data == "admin_settings")
async def cb_admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    log_admin_action(
        admin_id=callback.from_user.id,
        action="view_settings"
    )
    
    text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b> {'üîß –í–∫–ª—é—á–µ–Ω' if settings.maintenance_mode else '‚úÖ –í—ã–∫–ª—é—á–µ–Ω'}
<b>–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–µ—Å—è—Ü):</b> {settings.subscription_price_monthly} ‚ÇΩ
<b>–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–≥–æ–¥):</b> {settings.subscription_price_yearly} ‚ÇΩ
<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.rate_limit_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ YooMoney: {'‚úÖ' if settings.yoomoney_wallet else '‚ùå'}
‚Ä¢ Telegram Stars: ‚úÖ
‚Ä¢ –°–ë–ü: ‚úÖ
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîß –í–∫–ª—é—á–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" if not settings.maintenance_mode else "‚úÖ –í—ã–∫–ª—é—á–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                callback_data="toggle_maintenance"
            )
        ],
        [
            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@admin_router.callback_query(F.data == "exit_admin")
async def cb_exit_admin(callback: CallbackQuery):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    log_admin_action(
        admin_id=callback.from_user.id,
        action="exit_admin_panel"
    )
    
    from app.bot.keyboards.inline import main_menu_keyboard
    
    text = """
üëã <b>–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>

–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer() 