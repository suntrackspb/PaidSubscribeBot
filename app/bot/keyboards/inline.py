"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è PaidSubscribeBot.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–æ—Ç–æ–º.
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional

from app.database.models.subscription import SubscriptionDuration
from app.database.models.payment import PaymentMethod


def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription"),
        ],
        [
            InlineKeyboardButton(text="üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription"),
        ],
        [
            InlineKeyboardButton(text="üìñ –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
            InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        ]
    ])
    return keyboard


def subscription_plans_keyboard(
    monthly_price: int,
    yearly_price: int,
    trial_available: bool = True,
    trial_days: int = 3
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
    
    Args:
        monthly_price: –¶–µ–Ω–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö
        yearly_price: –¶–µ–Ω–∞ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö
        trial_available: –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        trial_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    keyboard = []
    
    # –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    keyboard.append([
        InlineKeyboardButton(
            text=f"üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - {monthly_price} ‚ÇΩ",
            callback_data=f"plan_{SubscriptionDuration.MONTHLY.value}"
        )
    ])
    
    # –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    discount = round((1 - (yearly_price / (monthly_price * 12))) * 100)
    keyboard.append([
        InlineKeyboardButton(
            text=f"üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - {yearly_price} ‚ÇΩ (-{discount}%)",
            callback_data=f"plan_{SubscriptionDuration.YEARLY.value}"
        )
    ])
    
    # –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if trial_available:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üéÅ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - {trial_days} –¥–Ω—è (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                callback_data=f"plan_{SubscriptionDuration.TRIAL.value}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def payment_methods_keyboard(
    plan: str,
    amount: int,
    available_methods: Optional[List[PaymentMethod]] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
    
    Args:
        plan: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
        amount: –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
        available_methods: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    """
    if available_methods is None:
        available_methods = [
            PaymentMethod.YOOMONEY,
            PaymentMethod.TELEGRAM_STARS,
            PaymentMethod.SBP,
            PaymentMethod.BANK_CARD,
        ]
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    for method in available_methods:
        if method == PaymentMethod.YOOMONEY:
            text = "üí∞ YooMoney"
        elif method == PaymentMethod.TELEGRAM_STARS:
            text = "‚≠ê Telegram Stars"
        elif method == PaymentMethod.SBP:
            text = "üöÄ –°–ë–ü"
        elif method == PaymentMethod.BANK_CARD:
            text = "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
        elif method == PaymentMethod.CRYPTO:
            text = "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        else:
            continue
            
        keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"payment_{method.value}_{plan}_{amount}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_plans"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def payment_confirmation_keyboard(payment_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.
    
    Args:
        payment_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                url=f"https://payment.example.com/pay/{payment_id}"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment_{payment_id}"
            )
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_id}"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])
    return keyboard


def subscription_info_keyboard(subscription_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    
    Args:
        subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏
        is_active: –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    """
    keyboard = []
    
    if is_active:
        keyboard.append([
            InlineKeyboardButton(
                text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
                url="https://t.me/your_channel"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="pay_subscription"
            )
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="pay_subscription"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def admin_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        ],
        [
            InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
            InlineKeyboardButton(text="üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_subscriptions"),
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
        ],
        [
            InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="exit_admin")
        ]
    ])
    return keyboard


def admin_users_keyboard(page: int = 1, total_pages: int = 1) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    
    Args:
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    keyboard.append([
        InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"),
        InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_users"),
    ])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_users_page_{page-1}")
            )
        
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page")
        )
        
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_users_page_{page+1}")
            )
        
        keyboard.append(pagination_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def user_management_keyboard(user_id: int, is_banned: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_banned: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    keyboard = []
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    keyboard.append([
        InlineKeyboardButton(
            text="üìã –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"admin_user_subscriptions_{user_id}"
        )
    ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="üí≥ –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"admin_user_payments_{user_id}"
        )
    ])
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    ban_text = "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_banned else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    keyboard.append([
        InlineKeyboardButton(
            text=ban_text,
            callback_data=f"admin_toggle_ban_{user_id}"
        ),
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data=f"admin_add_subscription_{user_id}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users"),
        InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def confirmation_keyboard(action: str, item_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        item_id: ID —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm_{action}_{item_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"cancel_{action}_{item_id}"
            )
        ]
    ])
    return keyboard


def back_button(callback_data: str = "back_to_main") -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    
    Args:
        callback_data: Callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])
    return keyboard


def url_button(text: str, url: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å URL –∫–Ω–æ–ø–∫–æ–π.
    
    Args:
        text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        url: URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, url=url)]
    ])
    return keyboard 